<%- include('../partials/header.ejs') %>
<style>
  .role-label {
    background-color: #ffcccc;
  }
  .status-label {
    background-color: #ccffcc;
  }
</style>
<div class="container mt-5 p-3">
  <div class="row mb-3 mt-5">
    <div class="col-md-3">
      <div class="d-flex">
        <div class="me-3">
          <button id="addService" class="btn btn-primary p-2">Tạo đồ ăn</button>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <h2 class="text-center">Danh sách đồ ăn</h2>
    </div>
    <div class="col-md-3">
      <div class="d-flex">
        <input
          id="searchInput"
          class="form-control me-2 p-2"
          type="search"
          placeholder="Tìm kiếm..."
          aria-label="Search"
          oninput="searchTable()"
        />
        <!-- <button
          class="btn btn-outline-success"
          type="submit"
          onclick="searchTable()"
        >
          Search
        </button> -->
      </div>
    </div>
  </div>
  <table class="table table-bordered table-hover align-middle">
    <thead>
      <tr class="table table-secondary">
        <th class="text-center">STT</th>
        <th class="text-center">ID</th>
        <th class="text-center">Hình ảnh</th>
        <th class="text-center">Tên</th>
        <th class="text-center">Giá</th>
        <th class="text-center">Thao tác</th>
        <th class="text-center">Hành động</th>
        <th class="text-center">Trạng thái</th>
      </tr>
    </thead>
    <tbody id="tableBody">
      <!--  -->
    </tbody>
  </table>
  <nav>
    <ul class="pagination justify-content-end" id="pagination">
      <li class="page-item" id="prevPage">
        <a class="page-link" href="#" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
        </a>
      </li>
      <li class="page-item">
        <a class="page-link" id="currentPageDisplay" href="#">1</a>
      </li>
      <li class="page-item" id="nextPage">
        <a class="page-link" href="#" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
        </a>
      </li>
    </ul>
  </nav>
</div>

<!-- Modal Sửa Thực Phẩm -->
<div
  class="modal fade"
  id="editFoodModal"
  tabindex="-1"
  aria-labelledby="editFoodModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editFoodModalLabel">
          <i class="fas fa-solid fa-pen-to-square text-danger"></i>
          Sửa đồ ăn
        </h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Đóng"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editFoodForm">
          <input type="hidden" id="foodId" name="foodId" />
          <div class="mb-3">
            <label for="foodName" class="form-label">Tên</label>
            <input
              type="text"
              class="form-control"
              id="foodName"
              name="name"
              required
            />
          </div>
          <div class="mb-3">
            <label for="foodPrice" class="form-label">Giá</label>
            <input
              type="number"
              class="form-control"
              id="foodPrice"
              name="price"
              required
            />
          </div>
          <div class="mb-3">
            <label for="foodImage" class="form-label">Hình Ảnh</label>
            <input
              type="file"
              class="form-control"
              id="foodImage"
              name="image"
            />
            <img
              id="currentImage"
              src="#"
              alt="Error"
              class="mt-3 rounded-3"
              width="70"
              height="70"
            />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Đóng
        </button>
        <button type="button" class="btn btn-primary" id="updateFood">
          Lưu thay đổi
        </button>
      </div>
    </div>
  </div>
</div>
<!-- Modal Delete -->
<div
  class="modal fade"
  id="deleteModal"
  tabindex="-1"
  aria-labelledby="deleteModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="deleteModalLabel">
          <i class="fas fa-exclamation-triangle text-danger"></i>
          Xoá đồ ăn
        </h1>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="passDelete" class="form-label">Nhập password</label>
          <input
            autocomplete="on"
            type="password"
            class="form-control"
            id="passDeleteFood"
            name="passDeleteFood"
            required
          />
          <div class="invalid-feedback" id="passwordFeedback">
            Vui lòng nhập password!
          </div>
          <div class="invalid-feedback" id="passwordErrorFeedback">
            Password sai!
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-danger" id="deleteFood">
          Xoá
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Search -->
<script>
  function searchTable() {
    const input = document.getElementById("searchInput").value.toLowerCase();
    const tableBody = document.getElementById("tableBody");
    const rows = tableBody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let match = false;

      for (let j = 0; j < cells.length; j++) {
        if (cells[j].innerText.toLowerCase().indexOf(input) > -1) {
          match = true;
          break;
        }
      }

      if (match) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>
<!-- Refresh -->
<script>
  document
    .getElementById("addService")
    .addEventListener("click", async function () {
      window.location.href = "/service/serviceAdd";
    });
</script>
<!-- Nếu ảnh bị lỗi không load được, thay thế bằng ảnh này -->
<script>
  function handleImageError(image) {
    image.onerror = null;
    image.src = "/images/avatar.jpg";
  }
</script>
<!-- Pagination (Số trang) -->
<script>
  $(document).ready(function () {
    let token = "";
    let apiUrl = "";
    let currentPage = 1;
    // Get Token
    $.ajax({
      url: "/token/getToken",
      type: "GET",
      async: false, // đồng bộ
      success: function (data) {
        token = data.token;
        apiUrl = data.apiUrl;
      },
      error: function (error) {
        console.log(error);
      },
    });

    function fetchData(page) {
      $.ajax({
        url: `http://139.180.132.97:3000/foods/admin?page=${page}`,
        type: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        success: function (data) {
          const itemsPerPage = 10;
          const foods = data.getall;

          if (foods.length === 0 && page > 1) {
            currentPage--;
            return; // Không cập nhật nếu không còn dữ liệu
          }

          displayTable(foods, page);
          updatePagination(data.getall, page, foods.length);
          console.log(data.getall, page);
        },
        error: function (error) {
          console.error("Error fetching data:", error);
        },
      });
    }

    window.displayTable = function (data, page) {
      const tableBody = document.getElementById("tableBody");
      // Xóa các phần tử con trong tableBody hiện tại
      while (tableBody.firstChild) {
        tableBody.removeChild(tableBody.firstChild);
      }

      const startIndex = (page - 1) * 10;
      const pageData = data;

      // Tạo và thêm các dòng vào tableBody
      pageData.forEach((food, index) => {
        const row = document.createElement("tr");

        // Cột số thứ tự
        const sttCell = document.createElement("td");
        sttCell.textContent = startIndex + index + 1;
        sttCell.classList.add("text-center");
        row.appendChild(sttCell);

        // Cột id 8 số
        const idCell = document.createElement("td");
        idCell.textContent = food._id.substring(0, 8).toUpperCase();
        idCell.classList.add("text-center", "text-primary");
        row.appendChild(idCell);

        // Cột avatar
        const imageCell = document.createElement("td");
        const img = document.createElement("img");
        img.src = `${apiUrl}/images/${food.image}`;
        img.alt = "Avatar";
        img.classList.add("rounded-3");
        img.width = 70;
        img.height = 70;
        img.onerror = function () {
          handleImageError(this);
        };
        imageCell.classList.add("text-center");
        imageCell.appendChild(img);
        row.appendChild(imageCell);

        // Cột Tên
        const nameCell = document.createElement("td");
        nameCell.textContent = food.name;
        nameCell.classList.add("text-center");
        row.appendChild(nameCell);

        // Cột giá
        const priceCell = document.createElement("td");
        priceCell.textContent = food.price.toLocaleString("en-US");
        priceCell.classList.add("text-center");
        row.appendChild(priceCell);

        // Cột thao tác (update, delelte)
        const actionsCell = document.createElement("td");
        actionsCell.classList.add("text-center");
        const editButton = document.createElement("button");
        editButton.classList.add("btn", "btn-info");
        editButton.textContent = "Sửa";
        editButton.onclick = function () {
          editFood(food._id);
        };
        actionsCell.appendChild(editButton);

        const deleteButton = document.createElement("button");
        deleteButton.classList.add("btn", "btn-danger", "ms-2");
        deleteButton.textContent = "Xoá";
        deleteButton.onclick = function () {
          deleteFood(food._id);
        };
        actionsCell.appendChild(deleteButton);
        row.appendChild(actionsCell);

        // Cột hành động (bật tắt trạng thái)
        const statusCell = document.createElement("td");
        statusCell.classList.add("text-center");
        const statusDiv = document.createElement("div");
        statusDiv.classList.add(
          "form-check",
          "form-switch",
          "form-check-reverse",
          "d-flex",
          "justify-content-center"
        );

        const statusInput = document.createElement("input");
        statusInput.classList.add("form-check-input", "status-toggle");
        statusInput.type = "checkbox";
        statusInput.dataset.id = food._id;
        if (food.status === "active") {
          statusInput.checked = true;
        }

        const statusLabel = document.createElement("label");
        statusLabel.classList.add("form-check-label");
        statusLabel.setAttribute("for", "toggle");

        statusDiv.appendChild(statusInput);
        statusDiv.appendChild(statusLabel);
        statusCell.appendChild(statusDiv);

        row.appendChild(statusCell);

        // Cột trạng thái
        const statusTextCell = document.createElement("td");
        statusTextCell.classList.add("text-center");

        const statusSpan = document.createElement("span");
        statusSpan.id = `status-${food._id}`;
        statusSpan.classList.add("rounded-3", "ps-3", "pe-3", "pt-1", "pb-1");

        if (food.status === "active") {
          statusSpan.classList.add(
            "status-label",
            "text-success",
            "border",
            "border-success"
          );
          statusSpan.textContent = "Kích hoạt";
        } else if (food.status === "inactive") {
          statusSpan.classList.add(
            "role-label",
            "text-danger",
            "border",
            "border-danger"
          );
          statusSpan.textContent = "Không kích hoạt";
        }

        statusTextCell.appendChild(statusSpan);
        row.appendChild(statusTextCell);

        tableBody.appendChild(row);
      });
    };

    function updatePagination(totalPages, page) {
      const prevButton = document
        .getElementById("prevPage")
        .querySelector("button");
      const nextButton = document
        .getElementById("nextPage")
        .querySelector("button");
      const currentPageDisplay = document.getElementById("currentPageDisplay");

      currentPageDisplay.textContent = page;

      if (page === 1) {
        document.getElementById("prevPage").classList.add("disabled");
      } else {
        document.getElementById("prevPage").classList.remove("disabled");
      }

      if (page === totalPages) {
        document.getElementById("nextPage").classList.add("disabled");
      } else {
        document.getElementById("nextPage").classList.remove("disabled");
      }
    }

    document.getElementById("prevPage").addEventListener("click", function () {
      if (currentPage > 1) {
        currentPage--;
        fetchData(currentPage);
      }
    });

    document.getElementById("nextPage").addEventListener("click", function () {
      currentPage++;
      fetchData(currentPage);
    });

    // Lần đầu tiên tải trang, lấy dữ liệu trang đầu tiên
    fetchData(currentPage);

    // Delete Food
    window.deleteFood = function (id) {
      // Hiện modal
      const myModal = new bootstrap.Modal(
        document.getElementById("deleteModal")
      );
      myModal.show();

      $("#deleteFood").click(function () {
        const pass = $("#passDeleteFood").val();
        const deleteFoodModal = bootstrap.Modal.getInstance(
          document.getElementById("deleteModal")
        );

        if (pass === "") {
          $("#passwordFeedback").show();
          $("#passwordErrorFeedback").hide();
        } else if (isNaN(pass) || pass !== "8888") {
          $("#passwordFeedback").hide();
          $("#passwordErrorFeedback").show();
        } else {
          $("#passwordFeedback").hide();
          $("#passwordErrorFeedback").hide();

          $.ajax({
            url: `${apiUrl}/foods/${id}?password=${pass}`,
            type: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
            success: function (data) {
              console.log(data);
              alert("Xoá thành công!");

              deleteFoodModal.hide();

              setTimeout(function () {
                window.location.reload();
              }, 1000);
            },
            error: function (error) {
              console.log(error);
              alert("Có lỗi gì đó đã sảy ra. Vui lòng thử lại!");

              deleteFoodModal.hide();

              setTimeout(function () {
                window.location.reload();
              }, 1000);
            },
          });
        }
      });
    };

    // Update Food
    window.editFood = function (id) {
      var initialName, initialPrice, initialImage;
      // Hiện modal
      const myModal = new bootstrap.Modal(
        document.getElementById("editFoodModal")
      );
      myModal.show();

      const editFoodModal = bootstrap.Modal.getInstance(
        document.getElementById("editFoodModal")
      );

      $.ajax({
        url: `http://139.180.132.97:3000/foods/${id}`,
        type: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        success: function (data) {
          const details = data.getFood;

          initialName = details.name;
          initialPrice = details.price;
          initialImage = details.image;

          $("#foodName").val(details.name);
          $("#foodPrice").val(details.price);
          $("#currentImage")
            .attr("src", `${apiUrl}/images/${details.image}`)
            .show();
        },
        error: function (error) {
          console.log(error);
        },
      });

      $("#updateFood").click(function () {
        const nameFood = $("#foodName").val();
        const priceFood = $("#foodPrice").val();
        const imageFood = $("#foodImage")[0].files[0];

        if (
          nameFood === initialName &&
          priceFood == initialPrice &&
          !imageFood
        ) {
          editFoodModal.hide();
          return;
        }

        const formData = new FormData();
        formData.append("name", nameFood);
        formData.append("price", priceFood);
        if (imageFood) {
          formData.append("image", imageFood);
        } else {
          formData.append("image", initialImage);
        }

        $.ajax({
          url: `http://139.180.132.97:3000/foods/${id}`,
          type: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          data: formData,
          processData: false,
          contentType: false,
          success: function (data) {
            console.log(data);
            alert("Cập nhật thành công!");

            editFoodModal.hide();

            setTimeout(function () {
              window.location.reload();
            }, 1000);
          },
          error: function (error) {
            console.log(error);
            alert("Có lỗi gì đó đã sảy ra. Vui lòng thử lại!");

            editFoodModal.hide();

            setTimeout(function () {
              window.location.reload();
            }, 1000);
          },
        });
      });
    };
  });
</script>
<!-- Preview Image -->
<script>
  document
    .getElementById("foodImage")
    .addEventListener("change", function (event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const img = document.getElementById("currentImage");
          img.src = e.target.result;
          img.classList.remove("d-none");
        };
        reader.readAsDataURL(file);
      }
    });
</script>
<script>
  $(document).ready(function () {
    let token = "";
    let apiUrl = "";
    // Get Token
    $.ajax({
      url: "/token/getToken",
      type: "GET",
      async: false, // đồng bộ
      success: function (data) {
        token = data.token;
        apiUrl = data.apiUrl;
      },
      error: function (error) {
        console.log(error);
      },
    });

    $(document).on("change", ".status-toggle", function () {
      const id = $(this).data("id");
      const status = $(this).is(":checked") ? "active" : "inactive";

      // Update status
      $.ajax({
        url: `${apiUrl}/foods/status/${id}`,
        type: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        success: function (data) {
          if (data.status === "active") {
            $(`#status-${id}`).text("Kích hoạt");
            $(`#status-${id}`).removeClass(
              "text-danger border-danger role-label"
            );
            $(`#status-${id}`).addClass(
              "status-label rounded-3 text-success border border-success ps-3 pe-3 pt-1 pb-1"
            );
          } else {
            $(`#status-${id}`).text("Không kích hoạt");
            $(`#status-${id}`).removeClass(
              "text-success border-success status-label"
            );
            $(`#status-${id}`).addClass(
              "role-label rounded-3 text-danger border border-danger ps-3 pe-3 pt-1 pb-1"
            );
          }
        },
        error: function (error) {
          console.log(error);
          alert("Đã có lỗi gì đó xảy ra!");
        },
      });
    });
  });
</script>
