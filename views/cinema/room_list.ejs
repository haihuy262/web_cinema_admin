<%- include('../partials/header.ejs') %>
<style>
  .search-wrapper {
    position: relative;
  }
  .search-wrapper .bi-search {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    color: #aaa;
  }
  .search-wrapper input {
    padding-left: 2.5rem; /* Adjust padding to make room for the icon */
  }
  .time-box {
    display: inline-block;
    padding: 3px 6px;
    margin: 2px;
    border: 1px solid #ccc; /* Màu viền */
    border-radius: 4px; /* Bo góc */
    background-color: #f5f5f5; /* Màu nền */
  }
</style>
<nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb" class="mt-3">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Quản lý rạp phim</a></li>
    <li class="breadcrumb-item active" aria-current="page">Danh sách phòng chiếu</li>
  </ol>
</nav>
<div class="card mb-3">
  <div class="card-body">
    <div class="d-flex mb-3">
      <button onclick="window.location.href = '/cinema/roomAdd'" class="btn btn-primary">
        Tạo phòng chiếu
      </button>
      <div class="search-wrapper ms-3">
        <i class="bi bi-search"></i>
        <input
          id="searchInput"
          class="form-control me-2"
          type="search"
          placeholder="Tìm kiếm..."
          aria-label="Search"
          oninput="searchTable()" />
        <!-- <button class="btn btn-outline-success" type="submit" onclick="searchTable()">Search</button> -->
      </div>
    </div>
    <table class="table table-bordered table-hover align-middle" id="roomsTable">
      <thead>
        <tr class="table-secondary">
          <th class="text-center">Stt</th>
          <th class="text-center">Tên</th>
          <th class="text-center">Phim</th>
          <th class="text-center">Ngày Chiếu</th>
          <th class="text-center">Giờ Chiếu</th>
          <th class="text-center">Rạp</th>
          <th class="text-center">Hành Động</th>
        </tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>
    <nav>
      <ul class="pagination justify-content-end" id="pagination">
        <li class="page-item" id="prevPage" onclick="changePage(-1)">
          <a class="page-link" href="#" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
        <li class="page-item">
          <a class="page-link" id="currentPage" href="#">1</a>
        </li>
        <li class="page-item" id="nextPage" onclick="changePage(1)">
          <a class="page-link" href="#" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>
<div
  class="modal fade"
  id="editRoomModal"
  tabindex="-1"
  aria-labelledby="editRoomModalLabel"
  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editRoomModalLabel">Sửa Phòng</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
      </div>
      <div class="modal-body">
        <form id="editRoomForm">
          <input type="hidden" id="roomId" name="roomId" />
          <div class="mb-3" hidden>
            <label for="roomName" class="form-label">Tên Phòng</label>
            <input type="text" class="form-control" id="roomName" name="name" required />
          </div>
          <div class="mb-3">
            <label for="roomMovie" class="form-label">Phim</label>
            <select class="form-control" id="roomMovie" name="roomMovie" required>
              <!-- Options will be populated by JavaScript -->
            </select>
          </div>
          <div class="mb-3">
            <label for="roomShowtime" class="form-label">Thời gian chiếu</label>
            <select class="form-control" id="roomShowtime" name="showtime" required multiple>
              <!-- <option value="" selected disabled>Chọn ngày chiếu...</option> -->
            </select>
          </div>
          <div class="mb-3">
            <label for="roomTime" class="form-label">Giờ Chiếu</label>
            <select class="form-control" id="roomTime" name="roomTime" multiple>
              <!-- Options will be populated by JavaScript -->
            </select>
          </div>
          <div class="mb-3" hidden>
            <label for="roomCinema" class="form-label">Rạp</label>
            <select class="form-control" id="roomCinema" name="roomCinema" required>
              <!-- Options will be populated by JavaScript -->
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
        <button type="button" class="btn btn-primary" onclick="submitEditRoom()">Lưu thay đổi</button>
      </div>
    </div>
  </div>
</div>

<script>
  let token = "";
  let apiUrl = "";
  let room = "";
  $(document).ready(function () {
    // Lấy token và URL API
    $.ajax({
      url: "/token/getToken",
      type: "GET",
      async: false, // đồng bộ
      success: function (data) {
        token = data.token;
        apiUrl = data.apiUrl;
      },
      error: function (error) {
        console.log(error);
      },
    });
  });

  function editRoom(button) {
    room = JSON.parse(button.getAttribute("data-room"));
    document.getElementById("roomId").value = room._id;
    document.getElementById("roomName").value = room.name;

    // Xóa các tùy chọn cũ và gọi API để làm mới danh sách
    $("#roomMovie").empty();
    $("#roomShowtime").empty();
    $("#roomCinema").empty();

    // Gọi API để lấy danh sách phim và cập nhật vào <select>
    $.ajax({
      url: `${apiUrl}/movies/no/login`,
      type: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      success: function (data) {
        data.getall.forEach((movie) => {
          const option = $("<option>").val(movie._id).text(movie.name);
          $("#roomMovie").append(option);
        });
        // Chọn phim hiện tại
        $("#roomMovie").val(room.movie._id);
      },
      error: function (error) {
        console.log(error);
      },
    });

    $.ajax({
      url: `${apiUrl}/showtimes/user`,
      type: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      success: function (data) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        data.getAll.forEach((showtime) => {
          const showtimeDate = new Date(showtime.date);
          showtimeDate.setHours(0, 0, 0, 0);

          if (showtimeDate >= today) {
            const option = $("<option>").val(showtime._id).text(showtimeDate.toLocaleDateString());
            $("#roomShowtime").append(option);
          }
        });

        $("#roomShowtime").val(room.showtime.map((st) => st._id));

        $("#roomShowtime").change(function () {
          const selectedDates = $(this).val();
          $("#roomTime").empty();

          selectedDates.forEach(function (idShowtime) {
            $.ajax({
              url: `${apiUrl}/showtimes/${idShowtime}`,
              type: "GET",
              headers: {
                Authorization: `Bearer ${token}`,
              },
              success: function (data) {
                const time = data.getShowtime.time;
                $("#roomTime").empty();
                time.forEach(function (timeEntry) {
                  const option = $("<option>").val(timeEntry._id).text(timeEntry.time);
                  $("#roomTime").append(option);
                });
              },
              error: function (error) {
                console.log(error);
              },
            });
          });
        });
        $("#roomShowtime").change();
      },
      error: function (error) {
        console.log(error);
      },
    });

    // Gọi API để lấy danh sách rạp và cập nhật vào <select>
    $.ajax({
      url: `${apiUrl}/cinemas`,
      type: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      success: function (data) {
        data.forEach((cinema) => {
          const option = $("<option>").val(cinema._id).text(cinema.name);
          $("#roomCinema").append(option);
        });
        // Chọn rạp hiện tại
        $("#roomCinema").val(room.cinema._id);
      },
      error: function (error) {
        console.log(error);
      },
    });

    // Hiện modal
    var myModal = new bootstrap.Modal(document.getElementById("editRoomModal"));
    myModal.show();
  }

  async function submitEditRoom() {
    const roomId = $("#roomId").val();
    const roomMovie = $("#roomMovie").val();
    const roomShowtime = $("#roomShowtime").val();
    const cinemaName = $("#roomCinema").val();

    $.ajax({
      url: `${apiUrl}/rooms/${roomId}`,
      type: "PUT",
      headers: {
        Authorization: `Bearer ${token}`,
      },
      data: { movie: roomMovie, showtime: roomShowtime },
      success: function (data) {
        if (data.updated === "Day allready exists") {
          Swal.fire({
            title: "Cảnh báo!",
            text: `Vui lòng chọn lại ngày!`,
            icon: "warning",
            confirmButtonText: "OK",
          });
        } else {
          Swal.fire({
            title: "Thành công!",
            text: "Update thành công!",
            icon: "success",
            confirmButtonText: "OK",
          }).then((result) => {
            location.reload();
          });
        }
      },
      error: function (error) {
        console.log(error);
        Swal.fire({
          title: "Lỗi!",
          text: "Đã xảy ra lỗi gì đó!.",
          icon: "error",
          confirmButtonText: "OK",
        }).then((result) => {
          location.reload();
        });
      },
    });
  }
</script>
<script>
  let currentPage = 1;
  let currentIndex = 1;

  async function fetchDiscounts(page = 1) {
    try {
      // Cập nhật giá trị currentIndex dựa trên trang hiện tại
      currentIndex = (page - 1) * 10 + 1; // Giả sử mỗi trang có 10 mục

      const response = await fetch(`/cinema/roomListTable?page=${page}`);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      if (data.success) {
        if (data.getAll.length === 0 && page > 1) {
          // Nếu không có dữ liệu và không phải là trang đầu tiên, quay về trang trước
          changePage(-1);
          return;
        }
        populateDiscountTable(data.getAll);
        document.getElementById("currentPage").textContent = page;
        currentPage = page;

        // Kiểm tra nếu trang tiếp theo có dữ liệu
        const nextPageResponse = await fetch(`/cinema/roomListTable?page=${page + 1}`);
        const nextPageData = nextPageResponse.ok
          ? await nextPageResponse.json()
          : { success: false, getAll: [] };
        const hasNextPage = nextPageData.success && nextPageData.getAll.length > 0;

        // Cập nhật trạng thái của các nút phân trang
        updatePaginationControls(hasNextPage, page > 1);
      } else {
        console.error("Error fetching discount data:", data.error);
        updatePaginationControls(false, page > 1); // Không có dữ liệu, không hiển thị nút Next và Previous
      }
    } catch (error) {
      console.error("Error fetching discount data:", error);
      updatePaginationControls(false, page > 1); // Có lỗi, không hiển thị nút Next và Previous
    }
  }

  function updatePaginationControls(hasNextPage, hasPrevPage) {
    const prevButton = document.getElementById("prevPage");
    const nextButton = document.getElementById("nextPage");

    // Vô hiệu hóa nút prev nếu đang ở trang 1
    if (!hasPrevPage) {
      prevButton.classList.add("disabled");
      prevButton.setAttribute("aria-disabled", "true");
      prevButton.style.pointerEvents = "none";
    } else {
      prevButton.classList.remove("disabled");
      prevButton.removeAttribute("aria-disabled");
      prevButton.style.pointerEvents = "auto";
    }

    // Vô hiệu hóa nút next nếu không có trang tiếp theo
    if (!hasNextPage) {
      nextButton.classList.add("disabled");
      nextButton.setAttribute("aria-disabled", "true");
      nextButton.style.pointerEvents = "none";
    } else {
      nextButton.classList.remove("disabled");
      nextButton.removeAttribute("aria-disabled");
      nextButton.style.pointerEvents = "auto";
    }
  }

  function changePage(direction) {
    const newPage = currentPage + direction;
    if (newPage > 0) {
      fetchDiscounts(newPage);
    }
  }

  // Khởi động với trang đầu tiên
  document.addEventListener("DOMContentLoaded", () => fetchDiscounts(currentPage));

  let updateInProgress = {}; // Đối tượng để theo dõi các ID đang được cập nhật

  function populateDiscountTable(rooms) {
    const tableBody = document.querySelector("#roomsTable tbody");
    tableBody.innerHTML = ""; // Clear existing table rows

    rooms.forEach((room, index) => {
      const row = document.createElement("tr");

      const cellSTT = document.createElement("td");
      cellSTT.textContent = currentIndex++;
      cellSTT.classList.add("text-center");
      row.appendChild(cellSTT);
      // Các cột dữ liệu khác
      const cellName = document.createElement("td");
      cellName.classList.add("text-center");
      cellName.textContent = room.name;
      row.appendChild(cellName);

      const cellMovie = document.createElement("td");
      cellMovie.classList.add("text-center");
      cellMovie.textContent = room.movie.name;
      row.appendChild(cellMovie);

      const cellShowtimeDate = document.createElement("td");
      cellShowtimeDate.classList.add("text-center");

      const cellShowtimeTime = document.createElement("td");
      cellShowtimeTime.classList.add("text-center");

      if (Array.isArray(room.showtime)) {
        const dates = room.showtime.map((show) => new Date(show.date).toLocaleDateString()).join("<br>");

        const times = room.showtime
          .map((show) => show.time.map((t) => `<span class="time-box">${t.time}</span>`).join(" "))
          .join("<br>");

        cellShowtimeDate.innerHTML = dates;
        cellShowtimeTime.innerHTML = times;
      } else {
        cellShowtimeDate.textContent = "Không có ngày chiếu";
        cellShowtimeTime.textContent = "Không có giờ chiếu";
      }

      row.appendChild(cellShowtimeDate);
      row.appendChild(cellShowtimeTime);
      const cellCinema = document.createElement("td");
      cellCinema.classList.add("text-center");
      cellCinema.textContent = room.cinema.name;
      row.appendChild(cellCinema);

      tableBody.appendChild(row);
      const cellActions = document.createElement("td");
      cellActions.classList.add("text-center");
      const editButton = document.createElement("button");
      editButton.classList.add("btn", "btn-info");
      editButton.textContent = "Sửa";
      editButton.setAttribute("data-room", JSON.stringify(room));
      editButton.onclick = () => editRoom(editButton);
      cellActions.appendChild(editButton);

      row.appendChild(cellActions);
      tableBody.appendChild(row);
    });
  }

  //  function editDiscount(button) {
  //    const discount = JSON.parse(button.getAttribute("data-discount"));
  //    document.getElementById("id").value = discount._id;
  //    document.getElementById("name").value = discount.name;
  //    document.getElementById("percent").value = discount.percent;
  //    document.getElementById("type").value = discount.type;
  //    document.getElementById("cinema").value = discount.cinema;

  //    var myModal = new bootstrap.Modal(document.getElementById("editModal"));
  //    myModal.show();
  //  }

  //  async function submitEdit() {
  //    const Id = document.getElementById("id").value;
  //    const formData = new FormData(document.getElementById("editForm"));

  //    try {
  //      const response = await fetch(`/discount/updateDiscount/${Id}`, {
  //        method: "PUT",
  //        body: formData,
  //      });

  //      if (response.ok) {
  //        alert("Cập nhật thành công!");
  //        window.location.reload();
  //      } else {
  //        alert("Đã xảy ra lỗi khi cập nhật.");
  //      }
  //    } catch (error) {
  //      alert("Đã xảy ra lỗi khi cập nhật.");
  //      console.error(error);
  //    }
  //  }
</script>
<!-- Search table -->
<script>
  function searchTable() {
    const input = document.getElementById("searchInput").value.toLowerCase();
    const tableBody = document.getElementById("tableBody");
    const rows = tableBody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let match = false;

      for (let j = 0; j < cells.length; j++) {
        if (cells[j].innerText.toLowerCase().indexOf(input) > -1) {
          match = true;
          break;
        }
      }

      if (match) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>
