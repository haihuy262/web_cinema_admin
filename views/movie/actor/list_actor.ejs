<%- include('../../partials/header.ejs') %>
<style>
  .search-wrapper {
    position: relative;
  }
  .search-wrapper .bi-search {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    color: #aaa;
  }
  .search-wrapper input {
    padding-left: 2.5rem; /* Adjust padding to make room for the icon */
  }
</style>
<nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb" class="mt-3">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Quản lý phim</a></li>
    <li class="breadcrumb-item active" aria-current="page">Danh sách diễn viên</li>
  </ol>
</nav>
<div class="card mb-3">
  <div class="card-body">
    <div>
      <div class="d-flex mb-3">
        <button onclick="window.location.href = '/movie/actor'" class="btn btn-primary">
          Thêm diễn viên
        </button>
        <div class="search-wrapper ms-3">
          <i class="bi bi-search"></i>
          <input
            id="searchInput"
            class="form-control me-2"
            type="search"
            placeholder="Tìm kiếm..."
            aria-label="Search"
            oninput="searchTable()" />
          <!-- <button class="btn btn-outline-success" type="submit" onclick="searchTable()">Search</button> -->
        </div>
      </div>
      <table class="table table-bordered table-hover align-middle" id="actorTable">
        <thead>
          <tr class="table table-secondary">
            <th class="text-center">STT</th>
            <th class="text-center">ID</th>
            <th class="text-center">Tên</th>
            <th class="text-center">Ảnh</th>
            <th class="text-center">Hành động</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <nav>
        <ul class="pagination justify-content-end" id="pagination">
          <li class="page-item" id="prevPage" onclick="changePage(-1)">
            <a class="page-link" href="#" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          <li class="page-item">
            <a class="page-link" id="currentPage" href="#">1</a>
          </li>
          <li class="page-item" id="nextPage" onclick="changePage(1)">
            <a class="page-link" href="#" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Chỉnh Sửa</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
      </div>
      <div class="modal-body">
        <form id="editForm">
          <input type="hidden" id="id" name="id" />
          <div class="mb-3">
            <label for="name" class="form-label">Tên</label>
            <input type="text" class="form-control" id="name" name="name" required />
          </div>
          <div class="mb-3">
            <label for="Image" class="form-label">Hình Ảnh</label>
            <input type="file" class="form-control" id="Image" name="image" />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
        <button type="button" class="btn btn-primary" onclick="submitEdit()">Lưu thay đổi</button>
      </div>
    </div>
  </div>
</div>

<script>
  function searchTable() {
    const input = document.getElementById("searchInput").value.toLowerCase();
    const tableBody = document.querySelector("#actorTable tbody");
    const rows = tableBody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let match = false;

      for (let j = 0; j < cells.length; j++) {
        if (cells[j].innerText.toLowerCase().indexOf(input) > -1) {
          match = true;
          break;
        }
      }

      row.style.display = match ? "" : "none";
    }
  }
</script>

<script>
  let currentPage = 1;
  let currentIndex = 1;
  async function fetchActors(page = 1) {
  try {
    const response = await fetch(`/movie/listActorTable?page=${page}`);
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    const data = await response.json();
    if (data.success) {
      if (data.getAll.length === 0 && page > 1) {
        // Nếu không có dữ liệu và không phải là trang đầu tiên, quay về trang trước
        changePage(-1);
        return;
      }
      populateActorTable(data.getAll);
      document.getElementById("currentPage").textContent = page;
      currentPage = page;

      // Kiểm tra nếu trang tiếp theo có dữ liệu
      const nextPageResponse = await fetch(`/movie/listActorTable?page=${page + 1}`);
      const nextPageData = nextPageResponse.ok
        ? await nextPageResponse.json()
        : { success: false, getAll: [] };
      const hasNextPage = nextPageData.success && nextPageData.getAll.length > 0;
      updatePaginationControls(hasNextPage, page > 1);
    } else {
      console.error("Error fetching actor data:", data.error);
      updatePaginationControls(false, page > 1);
    }
  } catch (error) {
    console.error("Error fetching actor data:", error);
    updatePaginationControls(false, page > 1);
  }
}

function updatePaginationControls(hasNextPage, hasPrevPage) {
  const prevButton = document.getElementById("prevPage");
  const nextButton = document.getElementById("nextPage");

  // Vô hiệu hóa nút prev nếu đang ở trang 1
  if (!hasPrevPage) {
    prevButton.classList.add("disabled");
    prevButton.setAttribute("aria-disabled", "true");
    prevButton.style.pointerEvents = "none";
  } else {
    prevButton.classList.remove("disabled");
    prevButton.removeAttribute("aria-disabled");
    prevButton.style.pointerEvents = "auto";
  }

  // Vô hiệu hóa nút next nếu không có trang tiếp theo
  if (!hasNextPage) {
    nextButton.classList.add("disabled");
    nextButton.setAttribute("aria-disabled", "true");
    nextButton.style.pointerEvents = "none";
  } else {
    nextButton.classList.remove("disabled");
    nextButton.removeAttribute("aria-disabled");
    nextButton.style.pointerEvents = "auto";
  }
}

function changePage(direction) {
  const newPage = currentPage + direction;
  if (newPage > 0) {
    fetchActors(newPage);
  }
}


  // Khởi động với trang đầu tiên
  document.addEventListener("DOMContentLoaded", () => fetchActors(currentPage));

  function populateActorTable(actors) {
    const tableBody = document.querySelector("#actorTable tbody");
    tableBody.innerHTML = ""; // Clear existing table rows

    actors.forEach((actor) => {
      const row = document.createElement("tr");

      const cellSTT = document.createElement("td");
      cellSTT.textContent = currentIndex++;
      cellSTT.classList.add("text-center");
      row.appendChild(cellSTT);
      // Thêm cột ID
      const cellId = document.createElement("td");
      cellId.classList.add("text-center");
      cellId.textContent = actor._id.slice(-8).toUpperCase();

      row.appendChild(cellId);

      // Thêm cột tên
      const cellName = document.createElement("td");
      cellName.classList.add("text-center");
      cellName.textContent = actor.name;
      row.appendChild(cellName);

      // Thêm cột hình ảnh
      const cellImage = document.createElement("td");
      cellImage.classList.add("text-center");
      const image = document.createElement("img");
      image.src = `http://139.180.132.97:3000/images/${actor.image}`;
      image.alt = actor.name;
      image.style.width = "70px";
      image.style.height = "70px";
      image.classList.add("rounded-3");
      cellImage.appendChild(image);
      row.appendChild(cellImage);

      // Thêm cột hành động
      const cellActions = document.createElement("td");
      cellActions.classList.add("text-center");
      const editButton = document.createElement("button");
      editButton.classList.add("btn", "btn-info");
      editButton.textContent = "Sửa";

      editButton.setAttribute("data-actor", JSON.stringify(actor));
      editButton.onclick = () => editActor(editButton);
      cellActions.appendChild(editButton);

      row.appendChild(cellActions);
      tableBody.appendChild(row);
    });
  }

  function editActor(button) {
    const actor = JSON.parse(button.getAttribute("data-actor"));
    document.getElementById("id").value = actor._id;
    document.getElementById("name").value = actor.name;

    // Hiện modal
    var myModal = new bootstrap.Modal(document.getElementById("editModal"));
    myModal.show();
  }

  async function submitEdit() {
    const id = document.getElementById("id").value;
    const formData = new FormData(document.getElementById("editForm"));

    try {
      const response = await fetch(`/movie/updateActor/${id}`, {
        method: "PUT",
        body: formData,
      });

      if (response.ok) {
        alert("Cập nhật thành công!");
        window.location.reload();
      } else {
        alert("Đã xảy ra lỗi khi cập nhật.");
      }
    } catch (error) {
      alert("Đã xảy ra lỗi khi cập nhật.");
      console.error(error);
    }
  }
</script>
