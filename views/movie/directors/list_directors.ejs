<%- include('../../partials/header.ejs') %>
<style>
  .search-wrapper {
    position: relative;
  }
  .search-wrapper .bi-search {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    color: #aaa;
  }
  .search-wrapper input {
    padding-left: 2.5rem; /* Adjust padding to make room for the icon */
  }
</style>
<nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb" class="mt-3">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Quản lý phim</a></li>
    <li class="breadcrumb-item active" aria-current="page">Danh sách đạo diễn</li>
  </ol>
</nav>
<div class="card mb-3">
  <div class="card-body">
    <div class="d-flex mb-3">
      <button onclick="window.location.href = '/movie/addDirectors'" class="btn btn-primary">
        Thêm đạo diễn
      </button>
      <div class="search-wrapper ms-3">
        <i class="bi bi-search"></i>
        <input
          id="searchInput"
          class="form-control me-2"
          type="search"
          placeholder="Tìm kiếm..."
          aria-label="Search"
          oninput="searchTable()" />
        <!-- <button class="btn btn-outline-success" type="submit" onclick="searchTable()">Search</button> -->
      </div>
    </div>

    <table class="table table-bordered table-hover align-middle" id="deactorTable">
      <thead>
        <tr class="table table-secondary">
          <th class="text-center">STT</th>
          <th class="text-center">ID</th>
          <th class="text-center">Tên</th>
          <th class="text-center">Ảnh</th>
          <th class="text-center">Hành động</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
    <nav>
      <ul class="pagination justify-content-end" id="pagination">
        <li class="page-item" id="prevPage" onclick="changePage(-1)">
          <a class="page-link" href="#" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
        <li class="page-item">
          <a class="page-link" id="currentPage" href="#">1</a>
        </li>
        <li class="page-item" id="nextPage" onclick="changePage(1)">
          <a class="page-link" href="#" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Chỉnh Sửa</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
      </div>
      <div class="modal-body">
        <form id="editForm">
          <input type="hidden" id="id" name="id" />
          <div class="mb-3">
            <label for="name" class="form-label">Tên</label>
            <input type="text" class="form-control" id="name" name="name" required />
          </div>
          <div class="mb-3">
            <label for="image" class="form-label">Hình Ảnh</label>
            <input type="file" class="form-control" id="image" name="image" />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
        <button type="button" class="btn btn-primary" onclick="submitEdit()">Lưu thay đổi</button>
      </div>
    </div>
  </div>
</div>

<script>
  function searchTable() {
    const input = document.getElementById("searchInput").value.toLowerCase();
    const tableBody = document.querySelector("#deactorTable tbody");
    const rows = tableBody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let match = false;

      for (let j = 0; j < cells.length; j++) {
        if (cells[j].innerText.toLowerCase().indexOf(input) > -1) {
          match = true;
          break;
        }
      }

      row.style.display = match ? "" : "none";
    }
  }
</script>

<script>
  let currentPage = 1;
  let currentIndex = 1;
  async function fetchDirectors(page = 1) {
    try {
      const response = await fetch(`/movie/listDirectorTable?page=${page}`);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      if (data.success) {
        if (data.getAll.length === 0 && page > 1) {
          changePage(-1);
          return;
        }
        populateDirectorTable(data.getAll);
        document.getElementById("currentPage").textContent = page;
        currentPage = page;

        const nextPageResponse = await fetch(`/movie/listDirectorTable?page=${page + 1}`);
        const nextPageData = nextPageResponse.ok
          ? await nextPageResponse.json()
          : { success: false, getAll: [] };
        const hasNextPage = nextPageData.success && nextPageData.getAll.length > 0;
        updatePaginationControls(hasNextPage, page > 1);
      } else {
        console.error("Error fetching director data:", data.error);
        updatePaginationControls(false, false);
      }
    } catch (error) {
      console.error("Error fetching director data:", error);
      updatePaginationControls(false, false);
    }
  }

  function updatePaginationControls(hasNextPage, hasPrevPage) {
    const prevButton = document.getElementById("prevPage");
    const nextButton = document.getElementById("nextPage");

    prevButton.classList.toggle("disabled", !hasPrevPage);
    nextButton.classList.toggle("disabled", !hasNextPage);
  }

  function changePage(direction) {
    const newPage = currentPage + direction;
    if (newPage > 0) {
      fetchDirectors(newPage);
    }
  }

  document.addEventListener("DOMContentLoaded", () => fetchDirectors(currentPage));

  function populateDirectorTable(directors) {
    const tableBody = document.querySelector("#deactorTable tbody");
    tableBody.innerHTML = "";

    directors.forEach((director) => {
      const row = document.createElement("tr");
      const cellSTT = document.createElement("td");
      cellSTT.textContent = currentIndex++;
      cellSTT.classList.add("text-center");
      row.appendChild(cellSTT);

      const cellId = document.createElement("td");
      cellId.classList.add("text-center");
      cellId.textContent = director._id.slice(-8).toUpperCase();
      row.appendChild(cellId);

      const cellName = document.createElement("td");
      cellName.textContent = director.name;
      cellName.classList.add("text-center");
      row.appendChild(cellName);

      const cellImage = document.createElement("td");
      cellImage.classList.add("text-center");
      const image = document.createElement("img");
      image.src = `http://139.180.132.97:3000/images/${director.image}`;
      image.alt = director.name;
      image.style.width = "70px";
      image.style.height = "70px";
      image.classList.add("rounded-3");
      cellImage.appendChild(image);
      row.appendChild(cellImage);

      const cellActions = document.createElement("td");
      const editButton = document.createElement("button");
      cellActions.classList.add("text-center");
      editButton.textContent = "Sửa";
      editButton.classList.add("btn", "btn-info");
      editButton.setAttribute("data-director", JSON.stringify(director));
      editButton.onclick = () => editDirector(editButton);
      cellActions.appendChild(editButton);

      row.appendChild(cellActions);
      tableBody.appendChild(row);
    });
  }

  function editDirector(button) {
    const director = JSON.parse(button.getAttribute("data-director"));
    document.getElementById("id").value = director._id;
    document.getElementById("name").value = director.name;

    var myModal = new bootstrap.Modal(document.getElementById("editModal"));
    myModal.show();
  }

  async function submitEdit() {
    const id = document.getElementById("id").value;
    const formData = new FormData(document.getElementById("editForm"));

    try {
      const response = await fetch(`/movie/updateDirecters/${id}`, {
        method: "PUT",
        body: formData,
      });

      if (response.ok) {
        alert("Cập nhật thành công!");
        window.location.reload();
      } else {
        alert("Đã xảy ra lỗi khi cập nhật.");
      }
    } catch (error) {
      alert("Đã xảy ra lỗi khi cập nhật.");
      console.error(error);
    }
  }
</script>
