<%- include('../partials/header.ejs') %>

<div class="mt-5" style="margin: 8%; padding-top: 5%">
  <div class="row mb-3 mt-5">
    <div class="col-md-3"></div>
    <div class="col-md-6">
      <h2 class="text-center">Danh sách Phim</h2>
    </div>
    <div class="col-md-3">
      <div class="d-flex">
        <input
          id="searchInput"
          class="form-control me-2 p-2"
          type="search"
          placeholder="Tìm kiếm..."
          aria-label="Search"
          oninput="searchTable()"
        />
       
      </div>
    </div>
  </div>
  <table class="table table-bordered table-hover align-middle" id="movieTable">
    <thead>
      <tr class="table table-secondary">
        
        <th class="text-center">Tên Phim</th>
        <th class="text-center">Giờ Chiếu</th>
        <th class="text-center">Phụ Đề</th>
        <th class="text-center">Độ Tuổi</th>
        <th class="text-center">Rate</th>
        <th class="text-center">Ngày Chiếu</th>
        <th class="text-center">Ảnh</th>
        <th style="width: 15%">Trailer</th>
        <th class="text-center">Hành Động</th>
      </tr>
    </thead>
    <tbody>
      
    </tbody>
  </table>
  <nav>
    <ul class="pagination justify-content-end" id="pagination">
      <li class="page-item" id="prevPage" onclick="changePage(-1)">
        <a class="page-link" href="#" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
        </a>
      </li>
      <li class="page-item">
        <a class="page-link" id="currentPage" href="#">1</a>
      </li>
      <li class="page-item" id="nextPage" onclick="changePage(1)">
        <a class="page-link" href="#" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
        </a>
      </li>
    </ul>
  </nav>
</div>
<div
  class="modal fade"
  id="editModal"
  tabindex="-1"
  aria-labelledby="editModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Sửa Phim</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Đóng"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editForm" enctype="multipart/form-data">
          <input type="hidden" id="Id" name="Id" />
          <div class="mb-3">
            <label for="name" class="form-label">Tên</label>
            <input
              type="text"
              class="form-control"
              id="name"
              name="name"
              required
            />
          </div>
          <div class="mb-3">
            <label for="duration" class="form-label">Duration</label>
            <input
              type="text"
              class="form-control"
              id="duration"
              name="duration"
              required
            />
          </div>
          <div class="mb-3">
            <label for="subtitle" class="form-label">Subtitle</label>
            <input
              type="text"
              class="form-control"
              id="subtitle"
              name="subtitle"
              required
            />
          </div>
          <div class="mb-3">
            <label for="censorship" class="form-label">Censorship</label>
            <input
              type="text"
              class="form-control"
              id="censorship"
              name="censorship"
              required
            />
          </div>
          <div class="mb-3">
            <label for="rate" class="form-label">Rate</label>
            <input
              type="text"
              class="form-control"
              id="rate"
              name="rate"
              required
            />
          </div>
          <div class="mb-3">
            <label for="release_date" class="form-label">Release Date</label>
            <input
              type="date"
              class="form-control"
              id="release_date"
              name="release_date"
              required
            />
          </div>
        
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Đóng
        </button>
        <button type="button" class="btn btn-primary" onclick="submitEdit()">
          Lưu thay đổi
        </button>
      </div>
    </div>
  </div>
</div>
<script>
function searchTable() {
  const input = document.getElementById("searchInput").value.toLowerCase();
  const tableBody = document.querySelector("#movieTable tbody");
  const rows = tableBody.getElementsByTagName("tr");

  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const cells = row.getElementsByTagName("td");
    let match = false;

    for (let j = 0; j < cells.length; j++) {
      if (cells[j].innerText.toLowerCase().indexOf(input) > -1) {
        match = true;
        break;
      }
    }

    row.style.display = match ? "" : "none";
  }
}
</script>
<script>
let currentPage = 1;

async function fetchMovies(page = 1) {
  try {
    const response = await fetch(`/movie/movieListTable?page=${page}`);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    if (data.success) {
      if (data.getAll.length === 0 && page > 1) {
        changePage(-1);
        return;
      }
      populateMovieTable(data.getAll);
      document.getElementById('currentPage').textContent = page;
      currentPage = page;

      const nextPageResponse = await fetch(`/movie/movieListTable?page=${page + 1}`);
      const nextPageData = nextPageResponse.ok ? await nextPageResponse.json() : { success: false, getAll: [] };
      const hasNextPage = nextPageData.success && nextPageData.getAll.length > 0;
      updatePaginationControls(hasNextPage, page > 1);
    } else {
      console.error('Error fetching movie data:', data.error);
      updatePaginationControls(false, false);
    }
  } catch (error) {
    console.error('Error fetching movie data:', error);
    updatePaginationControls(false, false);
  }
}

function updatePaginationControls(hasNextPage, hasPrevPage) {
  const prevButton = document.getElementById('prevPage');
  const nextButton = document.getElementById('nextPage');

  prevButton.classList.toggle('disabled', !hasPrevPage);
  nextButton.classList.toggle('disabled', !hasNextPage);
}

function changePage(direction) {
  const newPage = currentPage + direction;
  if (newPage > 0) {
    fetchMovies(newPage);
  }
}

document.addEventListener('DOMContentLoaded', () => fetchMovies(currentPage));

function populateMovieTable(movies) {
  const tableBody = document.querySelector('#movieTable tbody');
  tableBody.innerHTML = '';

  movies.forEach((movie) => {
    const row = document.createElement('tr');

  
    const cellName = document.createElement('td');
    cellName.textContent = movie.name;
    cellName.classList.add("text-center");
    row.appendChild(cellName);

    const cellDuration = document.createElement('td');
    cellDuration.classList.add("text-center");
    cellDuration.textContent = movie.duration;
    row.appendChild(cellDuration);

    const cellSubtitle = document.createElement('td');
    cellSubtitle.classList.add("text-center");
    cellSubtitle.textContent = movie.subtitle;
    row.appendChild(cellSubtitle);

    const cellCensorship = document.createElement('td');
    cellCensorship.classList.add("text-center");
    cellCensorship.textContent = movie.censorship;
    row.appendChild(cellCensorship);

    const cellRate = document.createElement('td');
    cellRate.classList.add("text-center");
    cellRate.textContent = movie.rate;
    row.appendChild(cellRate);

    const cellReleaseDate = document.createElement('td');
    cellReleaseDate.classList.add("text-center");
    cellReleaseDate.textContent = movie.release_date.substring(0, 10);
    row.appendChild(cellReleaseDate);

    const cellImage = document.createElement('td');
    cellImage.classList.add("text-center");
    const image = document.createElement('img');
    image.src = `http://139.180.132.97:3000/images/${movie.image}`;
    image.alt = movie.name;
    image.style.width = '70px';
    image.style.height = '70px';
    image.classList.add("rounded-3");
    cellImage.appendChild(image);
    row.appendChild(cellImage);

    const cellTrailer = document.createElement('td');
    cellTrailer.classList.add("text-center");
    const link = document.createElement('a');
    link.href = `http://139.180.132.97:3000/videos/${movie.trailer}`;
    link.target = '_blank';
    link.textContent = 'Xem Trailer';
    cellTrailer.appendChild(link);
    row.appendChild(cellTrailer);

    const cellActions = document.createElement('td');
    cellActions.classList.add("text-center");
    const editButton = document.createElement('button');
    editButton.textContent = 'Sửa';
    editButton.classList.add("btn", "btn-info");
    editButton.setAttribute('data-movie', JSON.stringify(movie));
    editButton.onclick = () => editMovie(editButton);
    cellActions.appendChild(editButton);

    row.appendChild(cellActions);
    tableBody.appendChild(row);
  });
}

function editMovie(button) {
  const movie = JSON.parse(button.getAttribute('data-movie'));

  // Điền dữ liệu vào các trường trong form
  document.getElementById('Id').value = movie._id;
  document.getElementById('name').value = movie.name;
  document.getElementById('duration').value = movie.duration;
  document.getElementById('subtitle').value = movie.subtitle;
  document.getElementById('censorship').value = movie.censorship;
  document.getElementById('rate').value = movie.rate;
  document.getElementById('release_date').value = movie.release_date.substring(0, 10);

  // Hiển thị modal để chỉnh sửa phim
  const editModal = new bootstrap.Modal(document.getElementById('editModal'));
  editModal.show();
}

async function submitEdit() {
  const id = document.getElementById('Id').value;
  const form = document.getElementById('editForm');
  const formData = new FormData(form);

  // Debug: Kiểm tra nội dung của FormData (chỉ cho các trường dữ liệu không phải tệp)
  for (const [key, value] of formData.entries()) {
    if (value instanceof File) {
      console.log(`${key}: File`);
    } else {
      console.log(`${key}: ${value}`);
    }
  }

  try {
    const response = await fetch(`/movie/updateMovie/${id}`, {
      method: 'PUT',
      body: formData
    });

    if (response.ok) {
      const result = await response.json();
      if (result.success) {
        const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
        editModal.hide();
        await fetchMovies(currentPage);
      } else {
        alert('Đã xảy ra lỗi khi chỉnh sửa phim: ' + result.error);
      }
    } else {
      alert('Đã xảy ra lỗi khi gửi yêu cầu: ' + response.statusText);
    }
  } catch (error) {
    alert('Đã xảy ra lỗi khi gửi yêu cầu: ' + error.message);
    console.error('Lỗi khi gửi yêu cầu:', error);
  }
}

</script>
